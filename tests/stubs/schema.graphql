type Query {
    testResolvers: [Thing]
    dataLoader: [Thing]
    dataLoaderWithCollections: [Thing!]!
    throwError: String!
    throwException: String!
    throwHttpException(code: Int = 400): String!
    throwModelNotFoundException: String!
    throwValidationException: String!
    ping: String!
    nonExistingClassDependency: String!
    resolveInterfaceFromQuery: [Attachment!]!
    resolveInterfaceFromType: Thing!
    resolveUnionFromQuery: [Media!]!
    resolveUnionFromType: Thing!
    variousCasing: [VariousCasing!]!
    resolvesFalseCorrectly: [AnotherThing!]!
    thingsWithSubThings: [Thing!]!
}

type Mutation {
    testMutation(input: TestMutationInput): TestMutationPayload
}

input TestMutationInput {
    message: String!
}

type TestMutationPayload {
    message: String!
}

type Thing {
    name: String!
    typeField: String!
    typeFieldWithClosure: String!
    missingType: SubThing
    dataLoaded: String!
    dataLoadedByKey: String!
    dataLoadedUsingArray: String!
    dataLoadedUsingObject: String!
    dataLoadedWithDefault: String!
    sharedDataLoaderOne: String!
    sharedDataLoaderTwo: String!
    attachment: Attachment
    media: Media
    subThings: [SubThing!]
}

type SubThing {
    name: String!
    thing: Thing
}

type AnotherThing {
    id: ID!
    requiredFlag: Boolean!
}

interface Attachment {
    name: String!
    size: Int!
}

type Photo implements Attachment {
    name: String!
    size: Int!
    height: Int!
    width: Int!
}

type Video implements Attachment {
    name: String!
    size: Int!
    length: Int!
}

type Audio {
    name: String!
    size: Int!
    encoding: String!
}

union Media = Audio | Photo | Video

type VariousCasing {
    name: String!
    camelCase: String!
    snake_case: String!
}
